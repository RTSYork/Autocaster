//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Sun Mar 31 15:57:04 BST 2013
//
// Method conflict info:
// Method: filter
// Conflict-free: hsync
// Sequenced before (restricted): filter
// Sequenced after (restricted): bin_out, vde
//
// Method: bin_out
// Conflict-free: bin_out, hsync, vde
// Sequenced before (restricted): filter
//
// Method: hsync
// Conflict-free: filter, bin_out, vde
// Conflicts: hsync
//
// Method: vde
// Conflict-free: bin_out, hsync
// Sequenced before (restricted): filter
// Conflicts: vde
//
//
// Ports:
// Name                         I/O  size props
// bin_out                        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// bin_in                         I     1 reg
// hsync                          I     1
// vde                            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkEdge(CLK,
	      RST_N,

	      bin_in,

	      bin_out,

	      hsync,

	      vde);
  input  CLK;
  input  RST_N;

  // action method filter
  input  bin_in;

  // value method bin_out
  output bin_out;

  // action method hsync
  input  hsync;

  // action method vde
  input  vde;

  // signals for module outputs
  wire bin_out;

  // register currPxl
  reg currPxl;
  wire currPxl$D_IN, currPxl$EN;

  // register filtered
  reg filtered;
  wire filtered$D_IN, filtered$EN;

  // register lastRow
  reg [1279 : 0] lastRow;
  wire [1279 : 0] lastRow$D_IN;
  wire lastRow$EN;

  // register ready
  reg ready;
  wire ready$D_IN, ready$EN;

  // register x
  reg [10 : 0] x;
  wire [10 : 0] x$D_IN;
  wire x$EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_new_pixel;

  // inputs to muxes for submodule ports
  wire [10 : 0] MUX_x$write_1__VAL_1;

  // remaining internal signals
  wire [1279 : 0] x__h517, y__h561;
  wire x__h467, y__h468;

  // value method bin_out
  assign bin_out = filtered ;

  // rule RL_new_pixel
  assign WILL_FIRE_RL_new_pixel = vde && !hsync && ready ;

  // inputs to muxes for submodule ports
  assign MUX_x$write_1__VAL_1 = x + 11'd1 ;

  // register currPxl
  assign currPxl$D_IN = bin_in ;
  assign currPxl$EN = 1'd1 ;

  // register filtered
  assign filtered$D_IN = x__h467 & y__h468 ;
  assign filtered$EN = vde && ready ;

  // register lastRow
  assign lastRow$D_IN = currPxl ? lastRow | x__h517 : lastRow & y__h561 ;
  assign lastRow$EN = vde && ready ;

  // register ready
  assign ready$D_IN = 1'd1 ;
  assign ready$EN = hsync && !ready ;

  // register x
  assign x$D_IN = WILL_FIRE_RL_new_pixel ? MUX_x$write_1__VAL_1 : 11'd0 ;
  assign x$EN = WILL_FIRE_RL_new_pixel || hsync && x != 11'd0 && ready ;

  // remaining internal signals
  assign x__h467 = lastRow[x] ;
  assign x__h517 = 1280'd1 << x ;
  assign y__h468 = ~currPxl ;
  assign y__h561 = ~x__h517 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        currPxl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	filtered <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lastRow <= `BSV_ASSIGNMENT_DELAY 1280'd0;
	ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	x <= `BSV_ASSIGNMENT_DELAY 11'd0;
      end
    else
      begin
        if (currPxl$EN) currPxl <= `BSV_ASSIGNMENT_DELAY currPxl$D_IN;
	if (filtered$EN) filtered <= `BSV_ASSIGNMENT_DELAY filtered$D_IN;
	if (lastRow$EN) lastRow <= `BSV_ASSIGNMENT_DELAY lastRow$D_IN;
	if (ready$EN) ready <= `BSV_ASSIGNMENT_DELAY ready$D_IN;
	if (x$EN) x <= `BSV_ASSIGNMENT_DELAY x$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    currPxl = 1'h0;
    filtered = 1'h0;
    lastRow =
	1280'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ready = 1'h0;
    x = 11'h2AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkEdge

