//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Tue Aug 20 14:20:52 BST 2013
//
// Method conflict info:
// Method: filter
// Conflict-free: hsync, vde
// Sequenced before (restricted): gry_out
// Conflicts: filter
//
// Method: gry_out
// Conflict-free: gry_out, hsync, vde
// Sequenced after (restricted): filter
//
// Method: hsync
// Conflict-free: filter, gry_out, vde
// Conflicts: hsync
//
// Method: vde
// Conflict-free: filter, gry_out, hsync
// Conflicts: vde
//
//
// Ports:
// Name                         I/O  size props
// gry_out                        O     8
// CLK                            I     1 clock
// RST_N                          I     1 reset
// bin_in                         I     1
// hsync                          I     1
// vde                            I     1 unused
//
// Combinational paths from inputs to outputs:
//   bin_in -> gry_out
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkBlur(CLK,
	      RST_N,

	      bin_in,

	      gry_out,

	      hsync,

	      vde);
  input  CLK;
  input  RST_N;

  // action method filter
  input  bin_in;

  // value method gry_out
  output [7 : 0] gry_out;

  // action method hsync
  input  hsync;

  // action method vde
  input  vde;

  // signals for module outputs
  wire [7 : 0] gry_out;

  // inlined wires
  wire [3 : 0] blurred$wget;
  wire blurred$whas;

  // register lastPxl
  reg [1 : 0] lastPxl;
  wire [1 : 0] lastPxl$D_IN;
  wire lastPxl$EN;

  // register lastRow
  reg [639 : 0] lastRow;
  wire [639 : 0] lastRow$D_IN;
  wire lastRow$EN;

  // register ready
  reg ready;
  wire ready$D_IN, ready$EN;

  // register working
  reg working;
  wire working$D_IN, working$EN;

  // register x
  reg [10 : 0] x;
  wire [10 : 0] x$D_IN;
  wire x$EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_blur_pixel, WILL_FIRE_RL_new_pixel;

  // inputs to muxes for submodule ports
  wire [10 : 0] MUX_x$write_1__VAL_1;
  wire [3 : 0] MUX_blurred$wset_1__VAL_1, MUX_blurred$wset_1__VAL_2;

  // remaining internal signals
  wire [639 : 0] x__h734, y__h782;
  wire [10 : 0] x__h645;

  // value method gry_out
  assign gry_out = blurred$whas ? {2{blurred$wget}} : 8'd0 ;

  // rule RL_blur_pixel
  assign WILL_FIRE_RL_blur_pixel = ready && working ;

  // rule RL_new_pixel
  assign WILL_FIRE_RL_new_pixel = !hsync && ready ;

  // inputs to muxes for submodule ports
  assign MUX_blurred$wset_1__VAL_1 =
	     { lastRow[x__h645[9:0]], lastPxl, bin_in } ;
  assign MUX_blurred$wset_1__VAL_2 = {4{bin_in}} ;
  assign MUX_x$write_1__VAL_1 = x + 11'd1 ;

  // inlined wires
  assign blurred$wget =
	     WILL_FIRE_RL_blur_pixel ?
	       MUX_blurred$wset_1__VAL_1 :
	       MUX_blurred$wset_1__VAL_2 ;
  assign blurred$whas = WILL_FIRE_RL_blur_pixel || ready && !working ;

  // register lastPxl
  assign lastPxl$D_IN = { bin_in, lastPxl[1] } ;
  assign lastPxl$EN = WILL_FIRE_RL_blur_pixel ;

  // register lastRow
  assign lastRow$D_IN = bin_in ? lastRow | x__h734 : lastRow & y__h782 ;
  assign lastRow$EN = WILL_FIRE_RL_blur_pixel ;

  // register ready
  assign ready$D_IN = 1'd1 ;
  assign ready$EN = hsync && !ready ;

  // register working
  assign working$D_IN = x != 11'd960 ;
  assign working$EN = x == 11'd960 || x == 11'd320 ;

  // register x
  assign x$D_IN = WILL_FIRE_RL_new_pixel ? MUX_x$write_1__VAL_1 : 11'd0 ;
  assign x$EN = WILL_FIRE_RL_new_pixel || hsync && x != 11'd0 && ready ;

  // remaining internal signals
  assign x__h645 = x - 11'd320 ;
  assign x__h734 = 640'd1 << x__h645 ;
  assign y__h782 = ~x__h734 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        lastPxl <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lastRow <= `BSV_ASSIGNMENT_DELAY 640'd0;
	ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
	working <= `BSV_ASSIGNMENT_DELAY 1'd0;
	x <= `BSV_ASSIGNMENT_DELAY 11'd0;
      end
    else
      begin
        if (lastPxl$EN) lastPxl <= `BSV_ASSIGNMENT_DELAY lastPxl$D_IN;
	if (lastRow$EN) lastRow <= `BSV_ASSIGNMENT_DELAY lastRow$D_IN;
	if (ready$EN) ready <= `BSV_ASSIGNMENT_DELAY ready$D_IN;
	if (working$EN) working <= `BSV_ASSIGNMENT_DELAY working$D_IN;
	if (x$EN) x <= `BSV_ASSIGNMENT_DELAY x$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    lastPxl = 2'h2;
    lastRow =
	640'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ready = 1'h0;
    working = 1'h0;
    x = 11'h2AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkBlur

