//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Mon Apr  1 19:40:08 BST 2013
//
// Method conflict info:
// Method: vsync
// Conflict-free: hsync, vde, pixel, xPos, yPos, press
// Conflicts: vsync
//
// Method: hsync
// Conflict-free: vsync, vde, pixel, xPos, yPos, press
// Conflicts: hsync
//
// Method: vde
// Conflict-free: vsync, hsync, pixel, xPos, yPos, press
// Conflicts: vde
//
// Method: pixel
// Conflict-free: vsync, hsync, vde, xPos, yPos, press
// Conflicts: pixel
//
// Method: xPos
// Conflict-free: vsync, hsync, vde, pixel, yPos, press
// Conflicts: xPos
//
// Method: yPos
// Conflict-free: vsync, hsync, vde, pixel, xPos, press
// Conflicts: yPos
//
// Method: press
// Conflict-free: vsync, hsync, vde, pixel, xPos, yPos, press
//
//
// Ports:
// Name                         I/O  size props
// press                          O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// pixel_in                       I     1 unused
// xPos_in                        I    11 unused
// yPos_in                        I    10 unused
// vsync                          I     1
// hsync                          I     1
// vde                            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFretFiltered(CLK,
		      RST_N,

		      vsync,

		      hsync,

		      vde,

		      pixel_in,

		      xPos_in,

		      yPos_in,

		      press);
  input  CLK;
  input  RST_N;

  // action method vsync
  input  vsync;

  // action method hsync
  input  hsync;

  // action method vde
  input  vde;

  // action method pixel
  input  pixel_in;

  // action method xPos
  input  [10 : 0] xPos_in;

  // action method yPos
  input  [9 : 0] yPos_in;

  // value method press
  output press;

  // signals for module outputs
  wire press;

  // register fretPressed
  reg fretPressed;
  wire fretPressed$D_IN, fretPressed$EN;

  // register fretValue1
  reg fretValue1;
  wire fretValue1$D_IN, fretValue1$EN;

  // register fretValue2
  reg fretValue2;
  wire fretValue2$D_IN, fretValue2$EN;

  // register fretValue3
  reg fretValue3;
  wire fretValue3$D_IN, fretValue3$EN;

  // register x
  reg [10 : 0] x;
  wire [10 : 0] x$D_IN;
  wire x$EN;

  // register y
  reg [9 : 0] y;
  wire [9 : 0] y$D_IN;
  wire y$EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_new_line, WILL_FIRE_RL_new_pixel;

  // inputs to muxes for submodule ports
  wire [10 : 0] MUX_x$write_1__VAL_1;
  wire [9 : 0] MUX_y$write_1__VAL_1;
  wire MUX_x$write_1__SEL_2;

  // value method press
  assign press = fretPressed ;

  // rule RL_new_line
  assign WILL_FIRE_RL_new_line = hsync && !vsync && x != 11'd0 ;

  // rule RL_new_pixel
  assign WILL_FIRE_RL_new_pixel = vde && !hsync && !vsync ;

  // inputs to muxes for submodule ports
  assign MUX_x$write_1__SEL_2 = WILL_FIRE_RL_new_line || vsync ;
  assign MUX_x$write_1__VAL_1 = x + 11'd1 ;
  assign MUX_y$write_1__VAL_1 = y + 10'd1 ;

  // register fretPressed
  assign fretPressed$D_IN = 1'd0 ;
  assign fretPressed$EN = vsync ;

  // register fretValue1
  assign fretValue1$D_IN = 1'b0 ;
  assign fretValue1$EN = 1'b0 ;

  // register fretValue2
  assign fretValue2$D_IN = 1'b0 ;
  assign fretValue2$EN = 1'b0 ;

  // register fretValue3
  assign fretValue3$D_IN = 1'b0 ;
  assign fretValue3$EN = 1'b0 ;

  // register x
  assign x$D_IN = WILL_FIRE_RL_new_pixel ? MUX_x$write_1__VAL_1 : 11'd0 ;
  assign x$EN = WILL_FIRE_RL_new_pixel || WILL_FIRE_RL_new_line || vsync ;

  // register y
  assign y$D_IN = WILL_FIRE_RL_new_line ? MUX_y$write_1__VAL_1 : 10'd0 ;
  assign y$EN = MUX_x$write_1__SEL_2 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        fretPressed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fretValue1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fretValue2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fretValue3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	x <= `BSV_ASSIGNMENT_DELAY 11'd0;
	y <= `BSV_ASSIGNMENT_DELAY 10'd0;
      end
    else
      begin
        if (fretPressed$EN)
	  fretPressed <= `BSV_ASSIGNMENT_DELAY fretPressed$D_IN;
	if (fretValue1$EN)
	  fretValue1 <= `BSV_ASSIGNMENT_DELAY fretValue1$D_IN;
	if (fretValue2$EN)
	  fretValue2 <= `BSV_ASSIGNMENT_DELAY fretValue2$D_IN;
	if (fretValue3$EN)
	  fretValue3 <= `BSV_ASSIGNMENT_DELAY fretValue3$D_IN;
	if (x$EN) x <= `BSV_ASSIGNMENT_DELAY x$D_IN;
	if (y$EN) y <= `BSV_ASSIGNMENT_DELAY y$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fretPressed = 1'h0;
    fretValue1 = 1'h0;
    fretValue2 = 1'h0;
    fretValue3 = 1'h0;
    x = 11'h2AA;
    y = 10'h2AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFretFiltered

