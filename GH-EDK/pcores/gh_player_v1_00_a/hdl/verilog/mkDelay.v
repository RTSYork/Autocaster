//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Sat Apr  6 15:06:06 BST 2013
//
// Method conflict info:
// Method: vsync
// Conflict-free: delay, in, frets_out, strum_out
// Conflicts: vsync
//
// Method: delay
// Conflict-free: vsync, in
// Sequenced before (restricted): frets_out, strum_out
// Conflicts: delay
//
// Method: in
// Conflict-free: vsync, delay
// Sequenced before (restricted): frets_out, strum_out
// Conflicts: in
//
// Method: frets_out
// Conflict-free: vsync, frets_out, strum_out
// Sequenced after (restricted): delay, in
//
// Method: strum_out
// Conflict-free: vsync, frets_out, strum_out
// Sequenced after (restricted): delay, in
//
//
// Ports:
// Name                         I/O  size props
// frets_out                      O     5
// strum_out                      O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// delay_in                       I     5
// frets                          I     5 reg
// strum                          I     1 reg
// vsync                          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkDelay(CLK,
	       RST_N,

	       vsync,

	       delay_in,

	       frets,
	       strum,

	       frets_out,

	       strum_out);
  input  CLK;
  input  RST_N;

  // action method vsync
  input  vsync;

  // action method delay
  input  [4 : 0] delay_in;

  // action method in
  input  [4 : 0] frets;
  input  strum;

  // value method frets_out
  output [4 : 0] frets_out;

  // value method strum_out
  output strum_out;

  // signals for module outputs
  wire [4 : 0] frets_out;
  wire strum_out;

  // inlined wires
  reg [5 : 0] outputs$wget;
  wire [5 : 0] inputs$wget;
  wire [4 : 0] write$wget;

  // register count
  reg [4 : 0] count;
  wire [4 : 0] count$D_IN;
  wire count$EN;

  // register fifo
  reg [5 : 0] fifo;
  wire [5 : 0] fifo$D_IN;
  wire fifo$EN;

  // register fifo_1
  reg [5 : 0] fifo_1;
  wire [5 : 0] fifo_1$D_IN;
  wire fifo_1$EN;

  // register fifo_10
  reg [5 : 0] fifo_10;
  wire [5 : 0] fifo_10$D_IN;
  wire fifo_10$EN;

  // register fifo_11
  reg [5 : 0] fifo_11;
  wire [5 : 0] fifo_11$D_IN;
  wire fifo_11$EN;

  // register fifo_12
  reg [5 : 0] fifo_12;
  wire [5 : 0] fifo_12$D_IN;
  wire fifo_12$EN;

  // register fifo_13
  reg [5 : 0] fifo_13;
  wire [5 : 0] fifo_13$D_IN;
  wire fifo_13$EN;

  // register fifo_14
  reg [5 : 0] fifo_14;
  wire [5 : 0] fifo_14$D_IN;
  wire fifo_14$EN;

  // register fifo_15
  reg [5 : 0] fifo_15;
  wire [5 : 0] fifo_15$D_IN;
  wire fifo_15$EN;

  // register fifo_16
  reg [5 : 0] fifo_16;
  wire [5 : 0] fifo_16$D_IN;
  wire fifo_16$EN;

  // register fifo_17
  reg [5 : 0] fifo_17;
  wire [5 : 0] fifo_17$D_IN;
  wire fifo_17$EN;

  // register fifo_18
  reg [5 : 0] fifo_18;
  wire [5 : 0] fifo_18$D_IN;
  wire fifo_18$EN;

  // register fifo_19
  reg [5 : 0] fifo_19;
  wire [5 : 0] fifo_19$D_IN;
  wire fifo_19$EN;

  // register fifo_2
  reg [5 : 0] fifo_2;
  wire [5 : 0] fifo_2$D_IN;
  wire fifo_2$EN;

  // register fifo_20
  reg [5 : 0] fifo_20;
  wire [5 : 0] fifo_20$D_IN;
  wire fifo_20$EN;

  // register fifo_21
  reg [5 : 0] fifo_21;
  wire [5 : 0] fifo_21$D_IN;
  wire fifo_21$EN;

  // register fifo_22
  reg [5 : 0] fifo_22;
  wire [5 : 0] fifo_22$D_IN;
  wire fifo_22$EN;

  // register fifo_23
  reg [5 : 0] fifo_23;
  wire [5 : 0] fifo_23$D_IN;
  wire fifo_23$EN;

  // register fifo_24
  reg [5 : 0] fifo_24;
  wire [5 : 0] fifo_24$D_IN;
  wire fifo_24$EN;

  // register fifo_25
  reg [5 : 0] fifo_25;
  wire [5 : 0] fifo_25$D_IN;
  wire fifo_25$EN;

  // register fifo_26
  reg [5 : 0] fifo_26;
  wire [5 : 0] fifo_26$D_IN;
  wire fifo_26$EN;

  // register fifo_27
  reg [5 : 0] fifo_27;
  wire [5 : 0] fifo_27$D_IN;
  wire fifo_27$EN;

  // register fifo_28
  reg [5 : 0] fifo_28;
  wire [5 : 0] fifo_28$D_IN;
  wire fifo_28$EN;

  // register fifo_29
  reg [5 : 0] fifo_29;
  wire [5 : 0] fifo_29$D_IN;
  wire fifo_29$EN;

  // register fifo_3
  reg [5 : 0] fifo_3;
  wire [5 : 0] fifo_3$D_IN;
  wire fifo_3$EN;

  // register fifo_30
  reg [5 : 0] fifo_30;
  wire [5 : 0] fifo_30$D_IN;
  wire fifo_30$EN;

  // register fifo_31
  reg [5 : 0] fifo_31;
  wire [5 : 0] fifo_31$D_IN;
  wire fifo_31$EN;

  // register fifo_4
  reg [5 : 0] fifo_4;
  wire [5 : 0] fifo_4$D_IN;
  wire fifo_4$EN;

  // register fifo_5
  reg [5 : 0] fifo_5;
  wire [5 : 0] fifo_5$D_IN;
  wire fifo_5$EN;

  // register fifo_6
  reg [5 : 0] fifo_6;
  wire [5 : 0] fifo_6$D_IN;
  wire fifo_6$EN;

  // register fifo_7
  reg [5 : 0] fifo_7;
  wire [5 : 0] fifo_7$D_IN;
  wire fifo_7$EN;

  // register fifo_8
  reg [5 : 0] fifo_8;
  wire [5 : 0] fifo_8$D_IN;
  wire fifo_8$EN;

  // register fifo_9
  reg [5 : 0] fifo_9;
  wire [5 : 0] fifo_9$D_IN;
  wire fifo_9$EN;

  // remaining internal signals
  wire [9 : 0] _6_MUL_IF_dly_whas_THEN_dly_wget_ELSE_0___d7;

  // value method frets_out
  assign frets_out = outputs$wget[5:1] ;

  // value method strum_out
  assign strum_out = outputs$wget[0] ;

  // inlined wires
  assign inputs$wget = { frets, strum } ;
  always@(count or
	  fifo_31 or
	  fifo or
	  fifo_1 or
	  fifo_2 or
	  fifo_3 or
	  fifo_4 or
	  fifo_5 or
	  fifo_6 or
	  fifo_7 or
	  fifo_8 or
	  fifo_9 or
	  fifo_10 or
	  fifo_11 or
	  fifo_12 or
	  fifo_13 or
	  fifo_14 or
	  fifo_15 or
	  fifo_16 or
	  fifo_17 or
	  fifo_18 or
	  fifo_19 or
	  fifo_20 or
	  fifo_21 or
	  fifo_22 or
	  fifo_23 or
	  fifo_24 or
	  fifo_25 or fifo_26 or fifo_27 or fifo_28 or fifo_29 or fifo_30)
  begin
    case (count)
      5'd0: outputs$wget = fifo;
      5'd1: outputs$wget = fifo_1;
      5'd2: outputs$wget = fifo_2;
      5'd3: outputs$wget = fifo_3;
      5'd4: outputs$wget = fifo_4;
      5'd5: outputs$wget = fifo_5;
      5'd6: outputs$wget = fifo_6;
      5'd7: outputs$wget = fifo_7;
      5'd8: outputs$wget = fifo_8;
      5'd9: outputs$wget = fifo_9;
      5'd10: outputs$wget = fifo_10;
      5'd11: outputs$wget = fifo_11;
      5'd12: outputs$wget = fifo_12;
      5'd13: outputs$wget = fifo_13;
      5'd14: outputs$wget = fifo_14;
      5'd15: outputs$wget = fifo_15;
      5'd16: outputs$wget = fifo_16;
      5'd17: outputs$wget = fifo_17;
      5'd18: outputs$wget = fifo_18;
      5'd19: outputs$wget = fifo_19;
      5'd20: outputs$wget = fifo_20;
      5'd21: outputs$wget = fifo_21;
      5'd22: outputs$wget = fifo_22;
      5'd23: outputs$wget = fifo_23;
      5'd24: outputs$wget = fifo_24;
      5'd25: outputs$wget = fifo_25;
      5'd26: outputs$wget = fifo_26;
      5'd27: outputs$wget = fifo_27;
      5'd28: outputs$wget = fifo_28;
      5'd29: outputs$wget = fifo_29;
      5'd30: outputs$wget = fifo_30;
      5'd31: outputs$wget = fifo_31;
    endcase
  end
  assign write$wget =
	     count + _6_MUL_IF_dly_whas_THEN_dly_wget_ELSE_0___d7[4:0] ;

  // register count
  assign count$D_IN = count + 5'd6 ;
  assign count$EN = vsync ;

  // register fifo
  assign fifo$D_IN = inputs$wget ;
  assign fifo$EN = write$wget == 5'd0 ;

  // register fifo_1
  assign fifo_1$D_IN = inputs$wget ;
  assign fifo_1$EN = write$wget == 5'd1 ;

  // register fifo_10
  assign fifo_10$D_IN = inputs$wget ;
  assign fifo_10$EN = write$wget == 5'd10 ;

  // register fifo_11
  assign fifo_11$D_IN = inputs$wget ;
  assign fifo_11$EN = write$wget == 5'd11 ;

  // register fifo_12
  assign fifo_12$D_IN = inputs$wget ;
  assign fifo_12$EN = write$wget == 5'd12 ;

  // register fifo_13
  assign fifo_13$D_IN = inputs$wget ;
  assign fifo_13$EN = write$wget == 5'd13 ;

  // register fifo_14
  assign fifo_14$D_IN = inputs$wget ;
  assign fifo_14$EN = write$wget == 5'd14 ;

  // register fifo_15
  assign fifo_15$D_IN = inputs$wget ;
  assign fifo_15$EN = write$wget == 5'd15 ;

  // register fifo_16
  assign fifo_16$D_IN = inputs$wget ;
  assign fifo_16$EN = write$wget == 5'd16 ;

  // register fifo_17
  assign fifo_17$D_IN = inputs$wget ;
  assign fifo_17$EN = write$wget == 5'd17 ;

  // register fifo_18
  assign fifo_18$D_IN = inputs$wget ;
  assign fifo_18$EN = write$wget == 5'd18 ;

  // register fifo_19
  assign fifo_19$D_IN = inputs$wget ;
  assign fifo_19$EN = write$wget == 5'd19 ;

  // register fifo_2
  assign fifo_2$D_IN = inputs$wget ;
  assign fifo_2$EN = write$wget == 5'd2 ;

  // register fifo_20
  assign fifo_20$D_IN = inputs$wget ;
  assign fifo_20$EN = write$wget == 5'd20 ;

  // register fifo_21
  assign fifo_21$D_IN = inputs$wget ;
  assign fifo_21$EN = write$wget == 5'd21 ;

  // register fifo_22
  assign fifo_22$D_IN = inputs$wget ;
  assign fifo_22$EN = write$wget == 5'd22 ;

  // register fifo_23
  assign fifo_23$D_IN = inputs$wget ;
  assign fifo_23$EN = write$wget == 5'd23 ;

  // register fifo_24
  assign fifo_24$D_IN = inputs$wget ;
  assign fifo_24$EN = write$wget == 5'd24 ;

  // register fifo_25
  assign fifo_25$D_IN = inputs$wget ;
  assign fifo_25$EN = write$wget == 5'd25 ;

  // register fifo_26
  assign fifo_26$D_IN = inputs$wget ;
  assign fifo_26$EN = write$wget == 5'd26 ;

  // register fifo_27
  assign fifo_27$D_IN = inputs$wget ;
  assign fifo_27$EN = write$wget == 5'd27 ;

  // register fifo_28
  assign fifo_28$D_IN = inputs$wget ;
  assign fifo_28$EN = write$wget == 5'd28 ;

  // register fifo_29
  assign fifo_29$D_IN = inputs$wget ;
  assign fifo_29$EN = write$wget == 5'd29 ;

  // register fifo_3
  assign fifo_3$D_IN = inputs$wget ;
  assign fifo_3$EN = write$wget == 5'd3 ;

  // register fifo_30
  assign fifo_30$D_IN = inputs$wget ;
  assign fifo_30$EN = write$wget == 5'd30 ;

  // register fifo_31
  assign fifo_31$D_IN = inputs$wget ;
  assign fifo_31$EN = write$wget == 5'd31 ;

  // register fifo_4
  assign fifo_4$D_IN = inputs$wget ;
  assign fifo_4$EN = write$wget == 5'd4 ;

  // register fifo_5
  assign fifo_5$D_IN = inputs$wget ;
  assign fifo_5$EN = write$wget == 5'd5 ;

  // register fifo_6
  assign fifo_6$D_IN = inputs$wget ;
  assign fifo_6$EN = write$wget == 5'd6 ;

  // register fifo_7
  assign fifo_7$D_IN = inputs$wget ;
  assign fifo_7$EN = write$wget == 5'd7 ;

  // register fifo_8
  assign fifo_8$D_IN = inputs$wget ;
  assign fifo_8$EN = write$wget == 5'd8 ;

  // register fifo_9
  assign fifo_9$D_IN = inputs$wget ;
  assign fifo_9$EN = write$wget == 5'd9 ;

  // remaining internal signals
  assign _6_MUL_IF_dly_whas_THEN_dly_wget_ELSE_0___d7 = 5'd6 * delay_in ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        count <= `BSV_ASSIGNMENT_DELAY 5'd0;
	fifo <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_1 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_10 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_11 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_12 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_13 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_14 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_15 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_16 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_17 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_18 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_19 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_2 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_20 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_21 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_22 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_23 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_24 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_25 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_26 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_27 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_28 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_29 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_3 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_30 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_31 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_4 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_5 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_6 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_7 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_8 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	fifo_9 <= `BSV_ASSIGNMENT_DELAY 6'd0;
      end
    else
      begin
        if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (fifo$EN) fifo <= `BSV_ASSIGNMENT_DELAY fifo$D_IN;
	if (fifo_1$EN) fifo_1 <= `BSV_ASSIGNMENT_DELAY fifo_1$D_IN;
	if (fifo_10$EN) fifo_10 <= `BSV_ASSIGNMENT_DELAY fifo_10$D_IN;
	if (fifo_11$EN) fifo_11 <= `BSV_ASSIGNMENT_DELAY fifo_11$D_IN;
	if (fifo_12$EN) fifo_12 <= `BSV_ASSIGNMENT_DELAY fifo_12$D_IN;
	if (fifo_13$EN) fifo_13 <= `BSV_ASSIGNMENT_DELAY fifo_13$D_IN;
	if (fifo_14$EN) fifo_14 <= `BSV_ASSIGNMENT_DELAY fifo_14$D_IN;
	if (fifo_15$EN) fifo_15 <= `BSV_ASSIGNMENT_DELAY fifo_15$D_IN;
	if (fifo_16$EN) fifo_16 <= `BSV_ASSIGNMENT_DELAY fifo_16$D_IN;
	if (fifo_17$EN) fifo_17 <= `BSV_ASSIGNMENT_DELAY fifo_17$D_IN;
	if (fifo_18$EN) fifo_18 <= `BSV_ASSIGNMENT_DELAY fifo_18$D_IN;
	if (fifo_19$EN) fifo_19 <= `BSV_ASSIGNMENT_DELAY fifo_19$D_IN;
	if (fifo_2$EN) fifo_2 <= `BSV_ASSIGNMENT_DELAY fifo_2$D_IN;
	if (fifo_20$EN) fifo_20 <= `BSV_ASSIGNMENT_DELAY fifo_20$D_IN;
	if (fifo_21$EN) fifo_21 <= `BSV_ASSIGNMENT_DELAY fifo_21$D_IN;
	if (fifo_22$EN) fifo_22 <= `BSV_ASSIGNMENT_DELAY fifo_22$D_IN;
	if (fifo_23$EN) fifo_23 <= `BSV_ASSIGNMENT_DELAY fifo_23$D_IN;
	if (fifo_24$EN) fifo_24 <= `BSV_ASSIGNMENT_DELAY fifo_24$D_IN;
	if (fifo_25$EN) fifo_25 <= `BSV_ASSIGNMENT_DELAY fifo_25$D_IN;
	if (fifo_26$EN) fifo_26 <= `BSV_ASSIGNMENT_DELAY fifo_26$D_IN;
	if (fifo_27$EN) fifo_27 <= `BSV_ASSIGNMENT_DELAY fifo_27$D_IN;
	if (fifo_28$EN) fifo_28 <= `BSV_ASSIGNMENT_DELAY fifo_28$D_IN;
	if (fifo_29$EN) fifo_29 <= `BSV_ASSIGNMENT_DELAY fifo_29$D_IN;
	if (fifo_3$EN) fifo_3 <= `BSV_ASSIGNMENT_DELAY fifo_3$D_IN;
	if (fifo_30$EN) fifo_30 <= `BSV_ASSIGNMENT_DELAY fifo_30$D_IN;
	if (fifo_31$EN) fifo_31 <= `BSV_ASSIGNMENT_DELAY fifo_31$D_IN;
	if (fifo_4$EN) fifo_4 <= `BSV_ASSIGNMENT_DELAY fifo_4$D_IN;
	if (fifo_5$EN) fifo_5 <= `BSV_ASSIGNMENT_DELAY fifo_5$D_IN;
	if (fifo_6$EN) fifo_6 <= `BSV_ASSIGNMENT_DELAY fifo_6$D_IN;
	if (fifo_7$EN) fifo_7 <= `BSV_ASSIGNMENT_DELAY fifo_7$D_IN;
	if (fifo_8$EN) fifo_8 <= `BSV_ASSIGNMENT_DELAY fifo_8$D_IN;
	if (fifo_9$EN) fifo_9 <= `BSV_ASSIGNMENT_DELAY fifo_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    count = 5'h0A;
    fifo = 6'h2A;
    fifo_1 = 6'h2A;
    fifo_10 = 6'h2A;
    fifo_11 = 6'h2A;
    fifo_12 = 6'h2A;
    fifo_13 = 6'h2A;
    fifo_14 = 6'h2A;
    fifo_15 = 6'h2A;
    fifo_16 = 6'h2A;
    fifo_17 = 6'h2A;
    fifo_18 = 6'h2A;
    fifo_19 = 6'h2A;
    fifo_2 = 6'h2A;
    fifo_20 = 6'h2A;
    fifo_21 = 6'h2A;
    fifo_22 = 6'h2A;
    fifo_23 = 6'h2A;
    fifo_24 = 6'h2A;
    fifo_25 = 6'h2A;
    fifo_26 = 6'h2A;
    fifo_27 = 6'h2A;
    fifo_28 = 6'h2A;
    fifo_29 = 6'h2A;
    fifo_3 = 6'h2A;
    fifo_30 = 6'h2A;
    fifo_31 = 6'h2A;
    fifo_4 = 6'h2A;
    fifo_5 = 6'h2A;
    fifo_6 = 6'h2A;
    fifo_7 = 6'h2A;
    fifo_8 = 6'h2A;
    fifo_9 = 6'h2A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkDelay

