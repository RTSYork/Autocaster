//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Fri Apr 19 11:32:48 BST 2013
//
// Method conflict info:
// Method: vsync
// Conflict-free: hsync, vde, rgb, xPos, yPos, trigUp, trigDown, press
// Conflicts: vsync
//
// Method: hsync
// Conflict-free: vsync, vde, rgb, xPos, yPos, trigUp, trigDown, press
// Conflicts: hsync
//
// Method: vde
// Conflict-free: vsync, hsync, rgb, xPos, yPos, trigUp, trigDown, press
// Conflicts: vde
//
// Method: rgb
// Conflict-free: vsync, hsync, vde, xPos, yPos, trigUp, trigDown, press
// Conflicts: rgb
//
// Method: xPos
// Conflict-free: vsync, hsync, vde, rgb, yPos, trigUp, trigDown, press
// Conflicts: xPos
//
// Method: yPos
// Conflict-free: vsync, hsync, vde, rgb, xPos, trigUp, trigDown, press
// Conflicts: yPos
//
// Method: trigUp
// Conflict-free: vsync, hsync, vde, rgb, xPos, yPos, trigDown, press
// Conflicts: trigUp
//
// Method: trigDown
// Conflict-free: vsync, hsync, vde, rgb, xPos, yPos, trigUp, press
// Conflicts: trigDown
//
// Method: press
// Conflict-free: vsync, hsync, vde, rgb, xPos, yPos, trigUp, trigDown, press
//
//
// Ports:
// Name                         I/O  size props
// press                          O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// rgb_pixel                      I    24
// xPos_val                       I    11
// yPos_val                       I    10
// trigUp_val                     I    24
// trigDown_val                   I    24
// vsync                          I     1
// hsync                          I     1
// vde                            I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFret(CLK,
	      RST_N,

	      vsync,

	      hsync,

	      vde,

	      rgb_pixel,

	      xPos_val,

	      yPos_val,

	      trigUp_val,

	      trigDown_val,

	      press);
  parameter [1 : 0] lOffset = 2'b0;
  parameter [1 : 0] rOffset = 2'b0;
  input  CLK;
  input  RST_N;

  // action method vsync
  input  vsync;

  // action method hsync
  input  hsync;

  // action method vde
  input  vde;

  // action method rgb
  input  [23 : 0] rgb_pixel;

  // action method xPos
  input  [10 : 0] xPos_val;

  // action method yPos
  input  [9 : 0] yPos_val;

  // action method trigUp
  input  [23 : 0] trigUp_val;

  // action method trigDown
  input  [23 : 0] trigDown_val;

  // value method press
  output press;

  // signals for module outputs
  wire press;

  // inlined wires
  wire [10 : 0] xPos1$wget, xPos2$wget, xPos3$wget, xPos4$wget, xPos5$wget;
  wire [9 : 0] yPos1$wget, yPos3$wget;

  // register fretPressed
  reg fretPressed;
  wire fretPressed$D_IN, fretPressed$EN;

  // register fretValue1
  reg fretValue1;
  wire fretValue1$D_IN, fretValue1$EN;

  // register fretValue2
  reg fretValue2;
  wire fretValue2$D_IN, fretValue2$EN;

  // register fretValue3
  reg fretValue3;
  wire fretValue3$D_IN, fretValue3$EN;

  // register fretValue4
  reg fretValue4;
  wire fretValue4$D_IN, fretValue4$EN;

  // register fretValue5
  reg fretValue5;
  wire fretValue5$D_IN, fretValue5$EN;

  // register x
  reg [10 : 0] x;
  wire [10 : 0] x$D_IN;
  wire x$EN;

  // register y
  reg [9 : 0] y;
  wire [9 : 0] y$D_IN;
  wire y$EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_new_line,
       WILL_FIRE_RL_new_pixel,
       WILL_FIRE_RL_start_pixel1,
       WILL_FIRE_RL_start_pixel2,
       WILL_FIRE_RL_start_pixel3,
       WILL_FIRE_RL_start_pixel4,
       WILL_FIRE_RL_start_pixel5;

  // inputs to muxes for submodule ports
  wire [10 : 0] MUX_x$write_1__VAL_1;
  wire [9 : 0] MUX_y$write_1__VAL_1;
  wire MUX_fretValue1$write_1__VAL_1,
       MUX_fretValue1$write_1__VAL_2,
       MUX_x$write_1__SEL_2;

  // remaining internal signals
  wire x_4_EQ_xPos1_wget__0_1_AND_y_8_EQ_yPos1_wget___ETC___d122,
       x_4_EQ_xPos2_wget__8_9_AND_y_8_EQ_yPos1_wget___ETC___d138,
       x_4_EQ_xPos3_wget__0_1_AND_y_8_EQ_yPos2_wget___ETC___d145,
       x_4_EQ_xPos3_wget__0_1_AND_y_8_EQ_yPos2_wget___ETC___d85,
       x_4_EQ_xPos4_wget__4_5_AND_y_8_EQ_yPos3_wget___ETC___d152,
       x_4_EQ_xPos5_wget__06_07_AND_y_8_EQ_yPos3_wget_ETC___d157,
       y_8_EQ_yPos1_wget__2___d43,
       y_8_EQ_yPos3_wget__6___d97;

  // value method press
  assign press = fretPressed ;

  // rule RL_start_pixel1
  assign WILL_FIRE_RL_start_pixel1 =
	     x == xPos1$wget && y_8_EQ_yPos1_wget__2___d43 && !fretPressed &&
	     !vsync ;

  // rule RL_start_pixel2
  assign WILL_FIRE_RL_start_pixel2 =
	     x == xPos2$wget && y_8_EQ_yPos1_wget__2___d43 && !fretPressed &&
	     !vsync ;

  // rule RL_start_pixel3
  assign WILL_FIRE_RL_start_pixel3 =
	     x_4_EQ_xPos3_wget__0_1_AND_y_8_EQ_yPos2_wget___ETC___d85 &&
	     !vsync ;

  // rule RL_start_pixel4
  assign WILL_FIRE_RL_start_pixel4 =
	     x == xPos4$wget && y_8_EQ_yPos3_wget__6___d97 && !fretPressed &&
	     !vsync ;

  // rule RL_start_pixel5
  assign WILL_FIRE_RL_start_pixel5 =
	     x == xPos5$wget && y_8_EQ_yPos3_wget__6___d97 && !fretPressed &&
	     !vsync ;

  // rule RL_new_line
  assign WILL_FIRE_RL_new_line = hsync && !vsync && x != 11'd0 ;

  // rule RL_new_pixel
  assign WILL_FIRE_RL_new_pixel = vde && !hsync && !vsync ;

  // inputs to muxes for submodule ports
  assign MUX_x$write_1__SEL_2 = WILL_FIRE_RL_new_line || vsync ;
  assign MUX_fretValue1$write_1__VAL_1 =
	     rgb_pixel[23:16] >= trigUp_val[23:16] &&
	     rgb_pixel[15:8] >= trigUp_val[15:8] &&
	     rgb_pixel[7:0] >= trigUp_val[7:0] ;
  assign MUX_fretValue1$write_1__VAL_2 =
	     rgb_pixel[23:16] >= trigDown_val[23:16] ||
	     rgb_pixel[15:8] >= trigDown_val[15:8] ||
	     rgb_pixel[7:0] >= trigDown_val[7:0] ;
  assign MUX_x$write_1__VAL_1 = x + 11'd1 ;
  assign MUX_y$write_1__VAL_1 = y + 10'd1 ;

  // inlined wires
  assign xPos1$wget = xPos_val - 11'd3 ;
  assign xPos2$wget = xPos_val - 11'd1 ;
  assign xPos3$wget = xPos_val + 11'd1 ;
  assign xPos4$wget = xPos_val + 11'd3 ;
  assign xPos5$wget = xPos_val + 11'd5 ;
  assign yPos1$wget = yPos_val + { 8'd0, lOffset } - 10'd1 ;
  assign yPos3$wget = yPos_val + { 8'd0, rOffset } - 10'd1 ;

  // register fretPressed
  assign fretPressed$D_IN =
	     fretValue1 || fretValue2 || fretValue3 || fretValue4 ||
	     fretValue5 ;
  assign fretPressed$EN = vsync ;

  // register fretValue1
  assign fretValue1$D_IN =
	     WILL_FIRE_RL_start_pixel1 ?
	       MUX_fretValue1$write_1__VAL_1 :
	       MUX_fretValue1$write_1__VAL_2 ;
  assign fretValue1$EN =
	     WILL_FIRE_RL_start_pixel1 ||
	     x_4_EQ_xPos1_wget__0_1_AND_y_8_EQ_yPos1_wget___ETC___d122 &&
	     !vsync ;

  // register fretValue2
  assign fretValue2$D_IN =
	     WILL_FIRE_RL_start_pixel2 ?
	       MUX_fretValue1$write_1__VAL_1 :
	       MUX_fretValue1$write_1__VAL_2 ;
  assign fretValue2$EN =
	     WILL_FIRE_RL_start_pixel2 ||
	     x_4_EQ_xPos2_wget__8_9_AND_y_8_EQ_yPos1_wget___ETC___d138 &&
	     !vsync ;

  // register fretValue3
  assign fretValue3$D_IN =
	     WILL_FIRE_RL_start_pixel3 ?
	       MUX_fretValue1$write_1__VAL_1 :
	       MUX_fretValue1$write_1__VAL_2 ;
  assign fretValue3$EN =
	     WILL_FIRE_RL_start_pixel3 ||
	     x_4_EQ_xPos3_wget__0_1_AND_y_8_EQ_yPos2_wget___ETC___d145 &&
	     !vsync ;

  // register fretValue4
  assign fretValue4$D_IN =
	     WILL_FIRE_RL_start_pixel4 ?
	       MUX_fretValue1$write_1__VAL_1 :
	       MUX_fretValue1$write_1__VAL_2 ;
  assign fretValue4$EN =
	     WILL_FIRE_RL_start_pixel4 ||
	     x_4_EQ_xPos4_wget__4_5_AND_y_8_EQ_yPos3_wget___ETC___d152 &&
	     !vsync ;

  // register fretValue5
  assign fretValue5$D_IN =
	     WILL_FIRE_RL_start_pixel5 ?
	       MUX_fretValue1$write_1__VAL_1 :
	       MUX_fretValue1$write_1__VAL_2 ;
  assign fretValue5$EN =
	     WILL_FIRE_RL_start_pixel5 ||
	     x_4_EQ_xPos5_wget__06_07_AND_y_8_EQ_yPos3_wget_ETC___d157 &&
	     !vsync ;

  // register x
  assign x$D_IN = WILL_FIRE_RL_new_pixel ? MUX_x$write_1__VAL_1 : 11'd0 ;
  assign x$EN = WILL_FIRE_RL_new_pixel || WILL_FIRE_RL_new_line || vsync ;

  // register y
  assign y$D_IN = WILL_FIRE_RL_new_line ? MUX_y$write_1__VAL_1 : 10'd0 ;
  assign y$EN = MUX_x$write_1__SEL_2 ;

  // remaining internal signals
  assign x_4_EQ_xPos1_wget__0_1_AND_y_8_EQ_yPos1_wget___ETC___d122 =
	     x == xPos1$wget && y_8_EQ_yPos1_wget__2___d43 && fretPressed ;
  assign x_4_EQ_xPos2_wget__8_9_AND_y_8_EQ_yPos1_wget___ETC___d138 =
	     x == xPos2$wget && y_8_EQ_yPos1_wget__2___d43 && fretPressed ;
  assign x_4_EQ_xPos3_wget__0_1_AND_y_8_EQ_yPos2_wget___ETC___d145 =
	     x == xPos3$wget && y == yPos_val && fretPressed ;
  assign x_4_EQ_xPos3_wget__0_1_AND_y_8_EQ_yPos2_wget___ETC___d85 =
	     x == xPos3$wget && y == yPos_val && !fretPressed ;
  assign x_4_EQ_xPos4_wget__4_5_AND_y_8_EQ_yPos3_wget___ETC___d152 =
	     x == xPos4$wget && y_8_EQ_yPos3_wget__6___d97 && fretPressed ;
  assign x_4_EQ_xPos5_wget__06_07_AND_y_8_EQ_yPos3_wget_ETC___d157 =
	     x == xPos5$wget && y_8_EQ_yPos3_wget__6___d97 && fretPressed ;
  assign y_8_EQ_yPos1_wget__2___d43 = y == yPos1$wget ;
  assign y_8_EQ_yPos3_wget__6___d97 = y == yPos3$wget ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        fretPressed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fretValue1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fretValue2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fretValue3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fretValue4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fretValue5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	x <= `BSV_ASSIGNMENT_DELAY 11'd0;
	y <= `BSV_ASSIGNMENT_DELAY 10'd0;
      end
    else
      begin
        if (fretPressed$EN)
	  fretPressed <= `BSV_ASSIGNMENT_DELAY fretPressed$D_IN;
	if (fretValue1$EN)
	  fretValue1 <= `BSV_ASSIGNMENT_DELAY fretValue1$D_IN;
	if (fretValue2$EN)
	  fretValue2 <= `BSV_ASSIGNMENT_DELAY fretValue2$D_IN;
	if (fretValue3$EN)
	  fretValue3 <= `BSV_ASSIGNMENT_DELAY fretValue3$D_IN;
	if (fretValue4$EN)
	  fretValue4 <= `BSV_ASSIGNMENT_DELAY fretValue4$D_IN;
	if (fretValue5$EN)
	  fretValue5 <= `BSV_ASSIGNMENT_DELAY fretValue5$D_IN;
	if (x$EN) x <= `BSV_ASSIGNMENT_DELAY x$D_IN;
	if (y$EN) y <= `BSV_ASSIGNMENT_DELAY y$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fretPressed = 1'h0;
    fretValue1 = 1'h0;
    fretValue2 = 1'h0;
    fretValue3 = 1'h0;
    fretValue4 = 1'h0;
    fretValue5 = 1'h0;
    x = 11'h2AA;
    y = 10'h2AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFret

